# Go 언어 엄격한 Cursor 룰

## 🚨 엄격한 원칙

### 절대 금지 사항
- 사용자 동의 없이 파일 삭제/수정
- 기존 기능 완전 제거 (대체 기능 없이)
- 테스트 없이 대규모 리팩토링
- Go 언어 관례와 완전히 다른 패턴 적용
- 고루틴 누수 방지 없이 고루틴 생성
- 에러 무시 (err 변수 사용하지 않음)
- 패닉 발생 가능성 있는 코드
- 데이터 레이스 가능성
- 메모리 누수 가능성
- 리소스 정리 없이 종료

### 엄격한 검증 필수
아래 항목들은 모두 필수로 검증해야 하며 사용자 동의 없이 바로 실행
- 모든 수정 후 `go build ./...` 빌드 테스트
- 모든 수정 후 `go vet ./...` 정적 분석
- 모든 수정 후 `go test ./...` 테스트 실행
- 모든 수정 후 `go mod tidy` 의존성 정리
- 모든 수정 후 `gofmt -w .` 포맷팅

## 🎯 우선순위 (엄격한 기준)

### Critical (즉시 수정 필수)
- 패닉 발생 가능성
- 고루틴 누수
- 메모리 누수
- 데이터 레이스
- 에러 무시
- 리소스 정리 누락
- 컨텍스트 전파 누락

### High (빠른 수정 필수)
- 성능 문제
- 안정성 이슈
- 리소스 누수
- 기능 오작동
- 슬라이스 바운드 오버플로우
- 타임아웃 설정 누락
- 연결 상태 관리 누락

### Medium (계획적 수정)
- 코드 품질
- 가독성
- 유지보수성
- Go 관례 준수
- 문서화

### Low (여유 있을 때)
- 스타일 개선
- 주석 추가
- 변수명 변경
- 포맷팅
- 불필요한 임포트 제거

## ✅ 엄격한 권장 사항

### 수정 중 (엄격한 규칙)
- 한 번에 하나씩만 수정
- 각 수정 후 즉시 빌드 테스트
- 각 수정마다 이유 명시
- Go 공식 문서/예제 참조
- 에러 처리 패턴 일관성 유지
- 컨텍스트 전파 확인

## 🔧 엄격한 상황별 가이드

### 공통
- Graceful shutdown 필수 구현
- 리소스 정리 순서 엄격히 확인 (defer 사용)
- 에러 처리 완성도 100% 확인
- 로깅 레벨 적절성 검토
- 컨텍스트 전파 필수 확인
- 시그널 처리 완성도 확인
- 연결 안정성 100% 확인
- 재연결 로직 완성도 확인
- 메모리 사용량 모니터링 필수
- 네트워크 타임아웃 설정 필수
- 고루틴 안전성 100% 확인
- 에러 복구 로직 완성도 확인

### 패킷 처리 코드 수정 시 (엄격한 규칙)
- 바운드 체크 100% 완성도
- 메모리 누수 가능성 완전 제거
- 성능 병목 지점 완전 해결
- 에러 복구 로직 완성도 확인
- 슬라이스/맵 안전성 100% 확인
- 동시성 안전성 확인

### 고루틴 사용 시 (엄격한 규칙)
- 컨텍스트로 종료 신호 필수 전파
- 고루틴 누수 완전 방지
- 동시성 안전성 100% 확인
- 채널 사용 패턴 엄격히 검토
- 리소스 정리 순서 엄격히 확인

## 💻 엄격한 기술적 가이드라인

### 에러 처리 (엄격한 규칙)
- 에러를 절대 무시하지 말 것
- 적절한 에러 래핑 필수 사용
- 에러 타입 확인 후 처리 필수
- defer로 리소스 정리 필수
- 에러 로깅 필수

### 동시성 처리 (엄격한 규칙)
- 고루틴에 컨텍스트 필수 전달
- 채널 사용 시 버퍼 크기 엄격히 고려
- sync 패키지 적절히 사용 필수
- 데이터 레이스 완전 방지
- 고루틴 종료 신호 필수 구현

### 메모리 관리 (엄격한 규칙)
- 슬라이스/맵 초기화 크기 엄격히 고려
- 불필요한 메모리 할당 완전 방지
- GC 압박 최소화 필수
- 프로파일링으로 메모리 사용량 확인
- 메모리 누수 가능성 완전 제거

### 네트워크 코드 (엄격한 규칙)
- 타임아웃 설정 필수
- 연결 상태 관리 필수
- 재연결 로직 완성도 확인
- 버퍼 크기 최적화 필수
- 에러 복구 로직 완성도 확인

### 패키지 구조 (엄격한 규칙)
- Go 모듈 시스템 엄격히 준수
- 패키지 네이밍 컨벤션 엄격히 준수
- 의존성 관리 엄격히 확인
- 버전 관리 엄격히 확인

## 🔍 엄격한 검증 (필수)

### 빌드 검증 (필수)
사용자 동의 없이 바로 실행
```bash
go build ./...
go mod tidy
go vet ./...
```

### 테스트 검증 (필수)
사용자 동의 없이 바로 실행
```bash
go test ./...
go test -race ./...
go test -bench=.
```

### 코드 품질 검증 (필수)
사용자 동의 없이 바로 실행
```bash
gofmt -w .
golint ./...
go vet ./...
```

### 성능 검증 (권장)
사용자 동의 없이 바로 실행
```bash
go test -bench=.
go tool pprof
```

## 📝 엄격한 코딩 스타일

### 네이밍 컨벤션 (엄격히 준수)
- 패키지명: 소문자, 단일 단어 필수
- 함수명: CamelCase 필수
- 변수명: CamelCase 필수
- 상수명: UPPER_CASE 필수
- 인터페이스명: -er 접미사 필수

### 포맷팅 (엄격히 준수)
- gofmt 사용 필수
- 탭 인덴테이션 필수
- 80자 라인 길이 권장
- 적절한 공백 사용 필수

### 주석 (엄격히 준수)
- 패키지 레벨 주석 필수
- exported 함수 주석 필수
- 복잡한 로직 주석 필수
- TODO, FIXME 태그 사용

## 📞 엄격한 사용자 소통

### 수정 제안 시 (엄격한 규칙)
1. 문제점 명확히 설명 (구체적 수치 포함)
2. Go 언어 관례 준수 방안 제시
3. 영향도 분석 (성능, 안정성, 메모리)
4. 사용자 동의 요청 (필수)

### 수정 완료 후 (엄격한 규칙)
1. 변경사항 요약 (구체적 개선 사항)
2. 개선 효과 설명 (수치 포함)
3. 추가 작업 필요성 검토
4. 다음 단계 제안

## 🚨 엄격한 금지 사항

### 절대 금지
- 사용자 동의 없이 파일 삭제/수정
- 기존 기능 완전 제거 (대체 기능 없이)
- 테스트 없이 대규모 리팩토링
- Go 언어 관례와 완전히 다른 패턴 적용
- 고루틴 누수 방지 없이 고루틴 생성
- 에러 무시 (err 변수 사용하지 않음)
- 패닉 발생 가능성 있는 코드
- 데이터 레이스 가능성
- 메모리 누수 가능성
- 리소스 정리 없이 종료
- 컨텍스트 전파 누락
- 타임아웃 설정 누락
- 연결 상태 관리 누락
- 바운드 체크 누락
- 동시성 안전성 누락
